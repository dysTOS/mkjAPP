@use "sass:math";

$border: 1px solid #efefef;

:host {
  --size: 95vw;

  @media (orientation: landscape) {
    --size: 65vh;
  }
}

.accidental {
  vertical-align: super;
  font-size: 0.6em;
}

.circle-of-fifths {
  font-family: "Volkhov";
  font-size: calc(var(--size) / 20);
  width: var(--size);
  height: var(--size);
  border: $border;
  margin: auto;
  border-radius: 50%;
  position: relative;
  box-sizing: border-box;
  list-style: none;
  color: black;

  box-shadow:
    0 calc(var(--size) / 40) calc(var(--size) / 40) rgba(0, 0, 0, 0.25),
    inset 0 0 0 calc(var(--size) / 8) white,
    inset 0 0 0 calc(var(--size) / 4.8) rgba(0, 0, 0, 0.1),
    inset 0 0 0 var(--size) white;

  $inner-size: 30%;
  &::after {
    content: "";
    position: absolute;
    top: $inner-size;
    left: $inner-size;
    right: $inner-size;
    bottom: $inner-size;
    border: $border;
    border-radius: 50%;
    box-sizing: border-box;
    background-color: var(--surface-0);
    box-shadow: inset 0 calc(var(--size) / 40) calc(var(--size) / 40) rgba(0, 0, 0, 0.25);
  }
}

@mixin center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.key {
  @include center();

  &.maj {
    color: red;
    text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
  }

  &.min {
    color: blue;
    text-shadow: 0 0 10px rgba(0, 0, 255, 0.5);
  }

  &.dim {
    color: green;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }

  &.aug {
    color: orange;
    text-shadow: 0 0 10px rgba(255, 165, 0, 0.5);
  }

  &::before {
    content: "";
    position: absolute;
    width: 1px;
    background-color: rgba(0, 0, 0, 0.1);
    height: var(--size);
  }

  > * {
    position: absolute;
  }
  > .step {
    // text-transform: uppercase;
  }
  > .literal {
    // text-transform: lowercase;
    // color: white;
    font-size: 0.75em;
  }
  > .sig {
    font-size: 0.5em;
    color: #999;
  }
}

@mixin key-pos($key-pos) {
  $a: ($key-pos - 4) * (math.$pi / 6);
  $dist: calc(var(--size) * 0.33);

  transform: translate(calc(cos($a) * $dist), calc(sin($a) * $dist));

  > .step {
    transform: translate(calc(cos($a) * (var(--size) / 10)), calc(sin($a) * (var(--size) / 10))) translate(-50%, -50%);
  }

  > .literal {
    transform: translate(calc(cos($a) * (calc(var(--size) * -1) / 12)), calc(sin($a) * (calc(var(--size) * -1) / 12)))
      translate(-50%, -50%);
  }

  > .sig {
    transform: translate(-50%, -50%);
  }

  &::before {
    transform: translate(calc(cos($a) * ($dist * -1)), calc(sin($a) * ($dist * -1))) translate(0%, -50%)
      rotate(calc(math.$pi / 12) * 1rad) rotate(calc($a + math.$pi / 2) * 1rad);
  }
}

@mixin key-loop($key) {
  @if $key > 0 {
    @include key-loop(($key - 1));
    .key:nth-child(#{$key}n) {
      @include key-pos($key);
    }
  }
}

@include key-loop(12);
